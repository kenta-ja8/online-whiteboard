/* tslint:disable */
/* eslint-disable */
/**
 * HelloApiSchema
 * Practice api schema
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: doriven@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import globalAxios, { type AxiosPromise, type AxiosInstance, type AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface CreateUserInput
 */
export interface CreateUserInput {
    /**
     * 
     * @type {string}
     * @memberof CreateUserInput
     */
    'email_address': string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserInput
     */
    'last_name': string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserInput
     */
    'first_name': string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserInput
     */
    'birthday': string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserInput
     */
    'address': string;
}
/**
 * 
 * @export
 * @interface CreateUserOutput
 */
export interface CreateUserOutput {
    /**
     * 
     * @type {number}
     * @memberof CreateUserOutput
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof CreateUserOutput
     */
    'email_address': string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserOutput
     */
    'last_name': string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserOutput
     */
    'first_name': string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserOutput
     */
    'birthday': string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserOutput
     */
    'address': string;
}
/**
 * 
 * @export
 * @interface GetUserListOutput
 */
export interface GetUserListOutput {
    /**
     * 
     * @type {Array<GetUserListOutputUserList>}
     * @memberof GetUserListOutput
     */
    'user_list'?: Array<GetUserListOutputUserList>;
}
/**
 * 
 * @export
 * @interface GetUserListOutputUserList
 */
export interface GetUserListOutputUserList {
    /**
     * 
     * @type {number}
     * @memberof GetUserListOutputUserList
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof GetUserListOutputUserList
     */
    'email_address': string;
    /**
     * 
     * @type {string}
     * @memberof GetUserListOutputUserList
     */
    'last_name': string;
    /**
     * 
     * @type {string}
     * @memberof GetUserListOutputUserList
     */
    'first_name': string;
    /**
     * 
     * @type {string}
     * @memberof GetUserListOutputUserList
     */
    'birthday': string;
    /**
     * 
     * @type {string}
     * @memberof GetUserListOutputUserList
     */
    'address': string;
}
/**
 * 
 * @export
 * @interface GetUserOutput
 */
export interface GetUserOutput {
    /**
     * 
     * @type {number}
     * @memberof GetUserOutput
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof GetUserOutput
     */
    'email_address': string;
    /**
     * 
     * @type {string}
     * @memberof GetUserOutput
     */
    'last_name': string;
    /**
     * 
     * @type {string}
     * @memberof GetUserOutput
     */
    'first_name': string;
    /**
     * 
     * @type {string}
     * @memberof GetUserOutput
     */
    'birthday': string;
    /**
     * 
     * @type {string}
     * @memberof GetUserOutput
     */
    'address': string;
}
/**
 * 
 * @export
 * @interface UpdateUserInput
 */
export interface UpdateUserInput {
    /**
     * 
     * @type {number}
     * @memberof UpdateUserInput
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserInput
     */
    'email_address'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserInput
     */
    'last_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserInput
     */
    'first_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserInput
     */
    'birthday'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserInput
     */
    'address'?: string;
}
/**
 * 
 * @export
 * @interface UpdateUserOutput
 */
export interface UpdateUserOutput {
    /**
     * 
     * @type {number}
     * @memberof UpdateUserOutput
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserOutput
     */
    'email_address': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserOutput
     */
    'last_name': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserOutput
     */
    'first_name': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserOutput
     */
    'birthday': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserOutput
     */
    'address': string;
}

/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new user.
         * @param {CreateUserInput} createUserInput new user info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser: async (createUserInput: CreateUserInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createUserInput' is not null or undefined
            assertParamExists('createUser', 'createUserInput', createUserInput)
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application:json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = serializeDataIfNeeded(createUserInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a user by id.
         * @param {number} id user id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getUser', 'id', id)
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new user.
         * @param {CreateUserInput} createUserInput new user info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUser(createUserInput: CreateUserInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateUserOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUser(createUserInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a user by id.
         * @param {number} id user id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUser(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUserOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUser(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUserListOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * Create a new user.
         * @param {CreateUserInput} createUserInput new user info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(createUserInput: CreateUserInput, options?: any): AxiosPromise<CreateUserOutput> {
            return localVarFp.createUser(createUserInput, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a user by id.
         * @param {number} id user id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser(id: number, options?: any): AxiosPromise<GetUserOutput> {
            return localVarFp.getUser(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserList(options?: any): AxiosPromise<GetUserListOutput> {
            return localVarFp.getUserList(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * Create a new user.
     * @param {CreateUserInput} createUserInput new user info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public createUser(createUserInput: CreateUserInput, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).createUser(createUserInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a user by id.
     * @param {number} id user id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getUser(id: number, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).getUser(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getUserList(options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).getUserList(options).then((request) => request(this.axios, this.basePath));
    }
}


