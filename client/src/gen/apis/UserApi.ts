/* tslint:disable */
/* eslint-disable */
/**
 * HelloApiSchema
 * Practice api schema
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: doriven@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreateUserInput,
    CreateUserInputFromJSON,
    CreateUserInputToJSON,
    CreateUserOutput,
    CreateUserOutputFromJSON,
    CreateUserOutputToJSON,
    GetUserOutput,
    GetUserOutputFromJSON,
    GetUserOutputToJSON,
} from '../models';

export interface CreateUserRequest {
    createUserInput: CreateUserInput;
}

export interface GetUserRequest {
    id: number;
}

/**
 * 
 */
export class UserApi extends runtime.BaseAPI {

    /**
     * Create a new user.
     */
    async createUserRaw(requestParameters: CreateUserRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CreateUserOutput>> {
        if (requestParameters.createUserInput === null || requestParameters.createUserInput === undefined) {
            throw new runtime.RequiredError('createUserInput','Required parameter requestParameters.createUserInput was null or undefined when calling createUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application:json';

        const response = await this.request({
            path: `/users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateUserInputToJSON(requestParameters.createUserInput),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateUserOutputFromJSON(jsonValue));
    }

    /**
     * Create a new user.
     */
    async createUser(requestParameters: CreateUserRequest, initOverrides?: RequestInit): Promise<CreateUserOutput> {
        const response = await this.createUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a user by id.
     */
    async getUserRaw(requestParameters: GetUserRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<GetUserOutput>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetUserOutputFromJSON(jsonValue));
    }

    /**
     * Get a user by id.
     */
    async getUser(requestParameters: GetUserRequest, initOverrides?: RequestInit): Promise<GetUserOutput> {
        const response = await this.getUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a users
     */
    async getUserListRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<object>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get a users
     */
    async getUserList(initOverrides?: RequestInit): Promise<Array<object>> {
        const response = await this.getUserListRaw(initOverrides);
        return await response.value();
    }

}
