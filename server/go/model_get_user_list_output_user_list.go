/*
 * HelloApiSchema
 *
 * Practice api schema
 *
 * API version: 1.0.0
 * Contact: doriven@example.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

type GetUserListOutputUserList struct {

	Id int64 `json:"id"`

	EmailAddress string `json:"email_address"`

	LastName string `json:"last_name"`

	FirstName string `json:"first_name"`

	Birthday string `json:"birthday"`

	Address string `json:"address"`
}

// AssertGetUserListOutputUserListRequired checks if the required fields are not zero-ed
func AssertGetUserListOutputUserListRequired(obj GetUserListOutputUserList) error {
	elements := map[string]interface{}{
		"id": obj.Id,
		"email_address": obj.EmailAddress,
		"last_name": obj.LastName,
		"first_name": obj.FirstName,
		"birthday": obj.Birthday,
		"address": obj.Address,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertRecurseGetUserListOutputUserListRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of GetUserListOutputUserList (e.g. [][]GetUserListOutputUserList), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseGetUserListOutputUserListRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aGetUserListOutputUserList, ok := obj.(GetUserListOutputUserList)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertGetUserListOutputUserListRequired(aGetUserListOutputUserList)
	})
}
