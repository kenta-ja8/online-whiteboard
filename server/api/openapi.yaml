openapi: 3.0.2
info:
  contact:
    email: doriven@example.com
    name: doriven
    url: https://example.com
  description: Practice api schema
  license:
    name: MIT
  title: HelloApiSchema
  version: 1.0.0
servers:
- description: development
  url: "http://localhost:{port}"
  variables:
    port:
      default: "8080"
      enum:
      - "80"
      - "8080"
- description: example
  url: http://example.com
security:
- BasicAuth: []
tags:
- description: user api
  name: user
paths:
  /users:
    get:
      description: Get a users
      operationId: getUserList
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserListOutput'
          description: Success by usre
      tags:
      - user
    post:
      description: Create a new user.
      operationId: createUser
      requestBody:
        content:
          application:json:
            schema:
              $ref: '#/components/schemas/CreateUserInput'
        description: new user info
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUserOutput'
          description: hoge
      tags:
      - user
  /users/{id}:
    get:
      description: Get a user by id.
      operationId: getUser
      parameters:
      - description: user id
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserOutput'
          description: Success by usre
      tags:
      - user
components:
  schemas:
    user_id:
      example: 1
      format: int64
      type: integer
    email_address:
      example: example@example.com
      type: string
    last_name:
      example: 山田
      type: string
    first_name:
      example: 太郎
      type: string
    birthday:
      format: date
      type: string
    address:
      example: 東京都新宿区西新宿２丁目８−１
      type: string
    CreateUserInput:
      properties:
        email_address:
          example: example@example.com
          type: string
        last_name:
          example: 山田
          type: string
        first_name:
          example: 太郎
          type: string
        birthday:
          format: date
          type: string
        address:
          example: 東京都新宿区西新宿２丁目８−１
          type: string
      required:
      - address
      - birthday
      - email_address
      - first_name
      - last_name
      type: object
    CreateUserOutput:
      example:
        birthday: 2000-01-23
        email_address: example@example.com
        address: 東京都新宿区西新宿２丁目８−１
        last_name: 山田
        id: 1
        first_name: 太郎
      properties:
        id:
          example: 1
          format: int64
          type: integer
        email_address:
          example: example@example.com
          type: string
        last_name:
          example: 山田
          type: string
        first_name:
          example: 太郎
          type: string
        birthday:
          format: date
          type: string
        address:
          example: 東京都新宿区西新宿２丁目８−１
          type: string
      required:
      - address
      - birthday
      - email_address
      - first_name
      - id
      - last_name
      type: object
    UpdateUserInput:
      properties:
        id:
          example: 1
          format: int64
          type: integer
        email_address:
          example: example@example.com
          type: string
        last_name:
          example: 山田
          type: string
        first_name:
          example: 太郎
          type: string
        birthday:
          format: date
          type: string
        address:
          example: 東京都新宿区西新宿２丁目８−１
          type: string
      required:
      - id
      type: object
    UpdateUserOutput:
      properties:
        id:
          example: 1
          format: int64
          type: integer
        email_address:
          example: example@example.com
          type: string
        last_name:
          example: 山田
          type: string
        first_name:
          example: 太郎
          type: string
        birthday:
          format: date
          type: string
        address:
          example: 東京都新宿区西新宿２丁目８−１
          type: string
      required:
      - address
      - birthday
      - email_address
      - first_name
      - id
      - last_name
      type: object
    GetUserOutput:
      example:
        birthday: 2000-01-23
        email_address: example@example.com
        address: 東京都新宿区西新宿２丁目８−１
        last_name: 山田
        id: 1
        first_name: 太郎
      properties:
        id:
          example: 1
          format: int64
          type: integer
        email_address:
          example: example@example.com
          type: string
        last_name:
          example: 山田
          type: string
        first_name:
          example: 太郎
          type: string
        birthday:
          format: date
          type: string
        address:
          example: 東京都新宿区西新宿２丁目８−１
          type: string
      required:
      - address
      - birthday
      - email_address
      - first_name
      - id
      - last_name
      type: object
    GetUserListOutput:
      items:
        properties:
          id:
            $ref: '#/components/schemas/user_id'
          email_address:
            $ref: '#/components/schemas/email_address'
          last_name:
            $ref: '#/components/schemas/last_name'
          first_name:
            $ref: '#/components/schemas/first_name'
          birthday:
            $ref: '#/components/schemas/birthday'
          address:
            $ref: '#/components/schemas/address'
        required:
        - address
        - birthday
        - email_address
        - first_name
        - id
        - last_name
        type: object
      type: array
